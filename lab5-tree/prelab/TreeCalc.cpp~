// Insert your header information here
// TreeCalc.cpp:  CS 2150 Tree Calculator method implementations

#include "TreeCalc.h"
#include <iostream>
#include <cstdlib>

using namespace std;

//Constructor
TreeCalc::TreeCalc() {
  //since mystack is staticly allocated, nothing is needed here
}

//Destructor- frees memory
TreeCalc::~TreeCalc() {
  while (!mystack.empty()){
    cleanTree(mystack.top());
  }
}

//Deletes tree/frees memory
void TreeCalc::cleanTree(TreeNode* ptr) {
  if (ptr->left!=NULL)
    cleanTree(ptr->left);
  if (ptr->right!=NULL)
    cleanTree(ptr->right);
  delete ptr;
}

//Gets data from user
void TreeCalc::readInput() {
    string response;
    cout << "Enter elements one by one in postfix notation" << endl
         << "Any non-numeric or non-operator character,"
         << " e.g. #, will terminate input" << endl;
    cout << "Enter first element: ";
    cin >> response;
    //while input is legal
    while (isdigit(response[0]) || response[0]=='/' || response[0]=='*'
            || response[0]=='-' || response[0]=='+' ) {
        insert(response);
        cout << "Enter next element: ";
        cin >> response;
    }
}

//Puts value in tree stack
void TreeCalc::insert(const string& val) {
    // insert a value into the tree
  TreeNode *newTN= new TreeNode(val);
  if (mystack.empty()){ //if mystack is empty
      mystack.push(newTN);
  }
  
  else { //if mystack is not empty
    if (val[0]=='/' || val[0]=='*'|| val[0]=='-' || val[0]=='+'){ //check for operator
      if (val.length()>1) //negative number
	mystack.push(newTN);
      else{
	newTN->right= mystack.top();
	mystack.pop();
	newTN->left= mystack.top();
	mystack.pop();
	mystack.push(newTN);
      }
    }
    else { //number
      mystack.push(newTN);
    }
  }
}

//Prints data in prefix form
void TreeCalc::printPrefix(TreeNode* ptr) const {
    // print the tree in prefix format
  if (ptr!=NULL){
    cout << ptr->value << " ";
    printPrefix(ptr->left);
    printPrefix(ptr->right);
  }
}

//Prints data in infix form
void TreeCalc::printInfix(TreeNode* ptr) const {
    // print tree in infix format with appropriate parentheses
  if (ptr!=NULL){
    if (ptr->left!=NULL)
      cout<< "(";
    printInfix(ptr->left);
    if (isdigit(ptr->value[0]) || (ptr->value[0]=='-' && ptr->value.length()>1) )
      cout << ptr->value;
    else
      cout <<" "<< ptr->value <<" ";
    printInfix(ptr->right);
    if (ptr->left!=NULL)
      cout<< ")";
  }
}

//Prints data in postfix form
void TreeCalc::printPostfix(TreeNode* ptr) const {
    // print the tree in postfix form
  if (ptr!=NULL){
    printPostfix(ptr->left);
    printPostfix(ptr->right);
    cout << ptr->value << " ";
  }
}

// Prints tree in all 3 (pre,in,post) forms

void TreeCalc::printOutput() const {
    if (mystack.size()!=0 && mystack.top()!=NULL) {
        cout << "Expression tree in postfix expression: ";
        // call your implementation of printPostfix()
	printPostfix(mystack.top());
        cout << endl;
	cout << "Expression tree in infix expression: ";
        // call your implementation of printInfix()
	printInfix(mystack.top());
        cout << endl;
        cout << "Expression tree in prefix expression: ";
        // call your implementation of printPrefix()
	printPrefix(mystack.top());
        cout << endl;
    } else
        cout<< "Size is 0." << endl;
}

//Evaluates tree, returns value
// private calculate() method
int TreeCalc::calculate(TreeNode* ptr) const {
    // Traverse the tree and calculates the result
  int leftVal, rightVal;
  if(ptr!=NULL){
    leftVal= calculate(ptr->left);
    rightVal= calculate(ptr->right);
    if (ptr->value[0]=='/')
      return leftVal/rightVal;
    if (ptr->value[0]=='*')
      return leftVal*rightVal;
    if (ptr->value[0]=='-'){
      if (ptr->value.length()>1)
	return atoi(&ptr->value[0]);
      else
      return leftVal-rightVal;
    }
    if(ptr->value[0]=='+')
      return leftVal+rightVal;
    else
      return atoi(&ptr->value[0]);
  }
}

//Calls calculate, sets the stack back to a blank stack
// public calculate() method. Hides private data from user
int TreeCalc::calculate() {
    int i = 0;
    // call private calculate method here
    i= calculate(mystack.top());
    return i;
}
